#!/bin/bash

# Copyright (c) 2020, James Bowen, All Rights Reserved

# Daemon options
DAEMON_OPTS=

# Process name ( For display )
NAME=${SYNOPKG_PKGNAME:-telegraf}

# User and group
USER=${NAME}
GROUP=${NAME}

# Install directory
PKG_DIR="/var/packages/${NAME}"

# Log file
# NOTE: Placing this within ${PKG_DIR} means the log is deleted on upgrade
LOG_FILE="${PKG_DIR}/target/log/telegraf.log"

# Check for sudo or root privileges before continuing
if [ "$UID" != "0" ]; then
    echo "You must be root to run this script"
    exit 1
fi

# Daemon name, where is the actual executable If the daemon is not
# there, then exit.
DAEMON=${PKG_DIR}/target/bin/telegraf
if [ ! -x $DAEMON ]; then
    echo "Executable $DAEMON does not exist!"
    exit 5
fi

# Configuration file
CONFIG=${PKG_DIR}/etc/telegraf.conf
CONFIG_DIR=${PKG_DIR}/etc/telegraf.d

# PID file for the daemon
PID_FILE=/var/run/${NAME}/$(basename ${DAEMON}).pid
PID_DIR=`dirname $PID_FILE`
if [ ! -d "$PID_DIR" ]; then
    mkdir -p $PID_DIR
fi
chown $USER:$GROUP $PID_DIR

# Max open files
OPEN_FILE_LIMIT=65536

# Logging
if [ ! -f "$LOG_FILE" ]; then
    mkdir -p $(dirname $LOG_FILE)
    chown $USER:$GROUP $(dirname $LOG_FILE)
    touch $LOG_FILE
fi
chown $USER:$GROUP $LOG_FILE

error() {
    rc=$1
    msg=$2

    if [ -n "$SYNOPKG_TEMP_LOGFILE" ]; then
        echo "ERROR: $msg" >> $SYNOPKG_TEMP_LOGFILE
    fi

    echo "ERROR: $msg" >&2
    exit $rc
}

start_daemon() {
    echo "Starting $NAME" >> $LOG_FILE

    # Check if config file exist
    if [ ! -r $CONFIG ]; then
        error 4 "Config file $CONFIG doesn't exist (or you don't have permission to view)"
    fi

    # Check that the PID file is writeable
    su -s /bin/sh -c "touch $PID_FILE" $USER &>/dev/null
    if [ $? -ne 0 ]; then
        error 5 "$PID_FILE not writable, check permissions"
    fi

    # Bump the file limits, before launching the daemon. These will
    # carry over to launched processes.
    ulimit -n $OPEN_FILE_LIMIT
    if [ $? -ne 0 ]; then
        error 1 "Unable to set ulimit to $OPEN_FILE_LIMIT"
    fi

    # Launch process
    local CMD="$DAEMON -pidfile $PID_FILE -config $CONFIG -config-directory $CONFIG_DIR $DAEMON_OPTS >>/dev/null 2>>$LOG_FILE &"
    su -s /bin/sh -c "$CMD" $USER

    wait_for_status 0 5
    if [ $? -ne 0 ]; then
        error 1 "Unable to start $NAME. Timeout exceeded."
    fi
}


stop_daemon() {

    # Stop the daemon.
    if [ -f $PID_FILE ]; then
        local PID="$(cat $PID_FILE)"

        echo "Stopping $NAME" >> $LOG_FILE
        kill -TERM $PID >> $LOG_FILE 2>&1

        wait_for_status 1
        if [ $? -ne 0 ]; then
            kill -KILL $PID >> $LOG_FILE 2>&1

            wait_for_status 1 5
            if [ $? -ne 0 ]; then
                error 1 "Unable to stop $NAME. Timeout exceeded."
            fi
        fi

        if [ -f "$PID_FILE" ]; then
            rm -f "$PID_FILE" &> /dev/null
        fi
    fi
}

restart() {
    # Restart the daemon.
    stop_daemon
    start_daemon
}

log() {
    echo ${LOG_FILE}
}

daemon_status() {
    if [ -n "${PID_FILE}" -a -r "${PID_FILE}" ]; then
        if kill -0 $(cat "${PID_FILE}") > /dev/null 2>&1; then
            return
        fi
        rm -f "${PID_FILE}" > /dev/null
    fi
    return 1
}

wait_for_status() {
    timeout=$2
    # default value: 20 seconds
    counter=${timeout:-20}
    while [ ${counter} -gt 0 ]; do
        daemon_status
        [ $? -eq $1 ] && return
        counter=$((counter-1))
        sleep 1
    done
    return 1
}

case $1 in
    start)
        if daemon_status; then
            echo "${NAME} is already running"
            exit 0
        else
            echo "Starting ${NAME} ..."
            start_daemon
            exit $?
        fi
        ;;

    stop)
        if daemon_status; then
            echo "Stopping ${NAME} ..."
            stop_daemon
            exit $?
        else
            echo "${NAME} is not running"
            exit 0
        fi
        ;;

    status)
        if daemon_status; then
            echo "${NAME} is running"
            exit 0
        else
            echo "${NAME} is not running"
            exit 3
        fi
        ;;

    restart)
        restart
        ;;

    status)
        status
        ;;

    version)
        $DAEMON version
        ;;

    log)
        log
        ;;

    prestart)
        # Zero return value allows user to start package
        exit 0
        ;;

    prestop)
        # Zero return value allows user to stop package
        exit 0
        ;;

    *)
        # For invalid arguments, print the usage message.
        echo "Usage: $0 {start|stop|restart|status|version|log|prestart|prestop}"
        exit 2
        ;;
esac
